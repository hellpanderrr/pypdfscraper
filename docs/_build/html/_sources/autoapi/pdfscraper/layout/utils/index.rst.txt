:py:mod:`pdfscraper.layout.utils`
=================================

.. py:module:: pdfscraper.layout.utils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pdfscraper.layout.utils.PageVerticalOrientation
   pdfscraper.layout.utils.Color
   pdfscraper.layout.utils.Bbox



Functions
~~~~~~~~~

.. autoapisummary::

   pdfscraper.layout.utils.get_bbox
   pdfscraper.layout.utils.get_rightmost
   pdfscraper.layout.utils.get_leftmost
   pdfscraper.layout.utils.get_topmost
   pdfscraper.layout.utils.get_bottommost
   pdfscraper.layout.utils.group_objs_y
   pdfscraper.layout.utils.get_center_group
   pdfscraper.layout.utils.get_center
   pdfscraper.layout.utils.flatten
   pdfscraper.layout.utils.groupby_consec



.. py:class:: PageVerticalOrientation

   .. py:attribute:: bottom_is_zero
      :annotation: :bool

      

   .. py:attribute:: page_height
      :annotation: :float

      


.. py:class:: Color

   .. py:attribute:: r
      :annotation: :confloat(ge=0, le=1)

      

   .. py:attribute:: g
      :annotation: :confloat(ge=0, le=1)

      

   .. py:attribute:: b
      :annotation: :confloat(ge=0, le=1)

      

   .. py:method:: __eq__(self, other, decimals=1)

      Return self==value.



.. py:class:: Bbox

   Bases: :py:obj:`NamedTuple`

   A rectangular bounding box.

   .. py:attribute:: x0
      :annotation: :float

      

   .. py:attribute:: y0
      :annotation: :float

      

   .. py:attribute:: x1
      :annotation: :float

      

   .. py:attribute:: y1
      :annotation: :float

      

   .. py:method:: __str__(self)

      Return str(self).


   .. py:method:: __eq__(self, other, decimals=1, n=4)

      Return self==value.


   .. py:method:: height(self)
      :property:


   .. py:method:: width(self)
      :property:


   .. py:method:: from_coords(cls, coords, invert_y=False, page_height=None)
      :classmethod:


   .. py:method:: set_vertical_orientation(self, orientation)



.. py:function:: get_bbox(block)


.. py:function:: get_rightmost(block)


.. py:function:: get_leftmost(block)


.. py:function:: get_topmost(block)


.. py:function:: get_bottommost(block)


.. py:function:: group_objs_y(words, gap = 5, decimals = 1)

   Group words into vertically adjacent lines.

   First, create a dictionary with rounded y-coordinates as keys, and lists of words as values.
   Then merge together lists whose coordinate delta is <= gap.

   @param words: list of Words
   @param gap: vertical delta between lines to be merged.
   @param decimals: rounding precision.

   @returns: vertically grouped lines, each line is sorted horizontally inside.



.. py:function:: get_center_group(group)

   Get a middle point of a group of words.


.. py:function:: get_center(obj)

   Get a middle point of a word.


.. py:function:: flatten(items)

   Yield items from any nested iterable.


.. py:function:: groupby_consec(df, col)


